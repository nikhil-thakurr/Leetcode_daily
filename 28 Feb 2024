Q-Link : https://leetcode.com/problems/find-bottom-left-tree-value/description/?envType=daily-question&envId=2024-02-28

Approach 1 : DFS using map

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int ans=0;

    void helper(TreeNode* node,unordered_map<int,int>&mp,int level){
        if(node==NULL)return ;
        if(mp.find(level)==mp.end()){
            mp[level]=node->val;
            ans=node->val;
        }
        helper(node->left,mp,level+1);
        helper(node->right,mp,level+1);
    }

    int findBottomLeftValue(TreeNode* root) {
        unordered_map<int,int>mp;
        helper(root,mp,0);
        return ans;
    }
};

Approach 2 : DFS O(1) Space

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int ans=0;

    void helper(TreeNode* node,int &maxLvl,int level){
        if(node==NULL)return ;
        if(level>maxLvl){
        ans=node->val,
        maxLvl++;
        }
        helper(node->left,maxLvl,level+1);
        helper(node->right,maxLvl,level+1);
    }

    int findBottomLeftValue(TreeNode* root) {
        int maxLvl=-1,lvl=0;
        helper(root,maxLvl,lvl);
        return ans;
    }
};

Approach 3 : BFS


class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        queue<TreeNode*>q;
        q.push(root);
        int ans=0;

        while(!q.empty()){
            TreeNode* tmp=q.front();
            q.pop();
            ans=tmp->val;
            if(tmp->right)q.push(tmp->right);
            if(tmp->left)q.push(tmp->left);

        }

        return ans;
    }
};
