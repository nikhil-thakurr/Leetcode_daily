Q-Link : https://leetcode.com/problems/time-needed-to-buy-tickets/?envType=daily-question&envId=2024-04-09

Approach 1 : QUEUE

class Solution {
public:
    int timeRequiredToBuy(vector<int>& tickets, int k) {
        queue<pair<int,int>>q;
        for(int i=0;i<tickets.size();i++){
            q.push({tickets[i],i});
        }

        int t=0;

        while(!q.empty()){
            int val=q.front().first;
            int idx=q.front().second;
            q.pop();
            val--;
            t++;
            if(val>0){
                q.push({val,idx});
            }
            if(idx==k && val==0)return t;
        }
        return -1;
    }
};

Approach 2 : O(1)

class Solution {
public:
    int timeRequiredToBuy(vector<int>& tickets, int k) {
        int t=0;

        for(int i=0;i<tickets.size();i++){
            if(i<=k)t+=min(tickets[i],tickets[k]);
            else t+=min(tickets[k]-1,tickets[i]);
        }

        return t;
    }
};
