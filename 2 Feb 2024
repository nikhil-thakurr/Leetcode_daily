Q-Link : https://leetcode.com/problems/sequential-digits/description/?envType=daily-question&envId=2024-02-02

Approach 1 : BFS

class Solution {
public:

void helper(int low, int high,  vector<int>&ans){
    queue<int>q;
    for(int i=1;i<9;i++)q.push(i);

    while(!q.empty()){
        int val=q.front();
        q.pop();

        if(val>=low && val<=high)ans.push_back(val);

        int ld=val%10;

        ld+=1;

        if(ld>9)continue;

        q.push(val*10+ld);
    }
}

    vector<int> sequentialDigits(int low, int high) {
        vector<int>ans;

        helper(low,high,ans);

        return ans;
    }
};

Approach 2 : Aree bhai bhai Approach (hehe)

class Solution {
public:
    vector<int> sequentialDigits(int low, int high) {
        vector<int> allPossible = {12, 23, 34, 45, 56, 67, 78, 89,
                          123, 234, 345, 456, 567, 678, 789,
                          1234, 2345, 3456, 4567, 5678, 6789,
                          12345, 23456, 34567, 45678, 56789,
                          123456, 234567, 345678, 456789,
                          1234567, 2345678, 3456789,
                          12345678, 23456789,
                          123456789};
        
        vector<int> result;
        
        int n = allPossible.size();
        
        for (int i = 0; i < n; i++) {
            if (allPossible[i] < low) continue;
            
            if (allPossible[i] > high) break;
            
            result.push_back(allPossible[i]);
        }
        return result;
    }
};
