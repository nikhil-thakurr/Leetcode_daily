Q-Link : https://leetcode.com/problems/implement-queue-using-stacks/submissions/1160178854/?envType=daily-question&envId=2024-01-29

Approach 1 : O(n) TC

class MyQueue {
public:
stack<int>st1,st2;
    MyQueue() {
        
    }
    
    void push(int x) {
        if(st2.empty()){
            // cout<<x<<" ";
            st1.push(x);
        }else{
            while(!st2.empty()){
                st1.push(st2.top());
                // cout<<st2.top()<<" ";
                st2.pop();
            }
            st1.push(x);
        }
    }
    
    int pop() {
        int val=0;
        if(st2.empty()){
            while(!st1.empty()){
                // cout<<st1.top()<<" ";
                st2.push(st1.top());
                st1.pop();
            }
        }
         val= st2.top();
         st2.pop();
         cout<<val<<" ";

         return val;
    }
    
    int peek() {
        int val=0;
        if(st2.empty()){
            while(!st1.empty()){
                st2.push(st1.top());
                st1.pop();
            }
        }else{
           return st2.top();
        }
        return st2.top();
    }
    
    bool empty() {
        return (st1.empty() && st2.empty());
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */


 Approach 2 : Amortized O(1) Complexity

 class MyQueue {
public:

    stack<int>input,output;

    int peekEle=-1;

    MyQueue() {
        
    }
    
    void push(int x) {
        if(input.empty()){
            peekEle=x;
        }
        input.push(x);
    }
    
    int pop() {
         if(!output.empty()){
             int val=output.top();
             output.pop();
             return val;
         }
         else{
             while(!input.empty()){
                 output.push(input.top());
                 input.pop();
             }
         }
         int val=output.top();
             output.pop();

             return val;
    }
    
    int peek() {
        if(output.empty())return peekEle;
        return output.top();
    }
    
    bool empty() {
        return (input.empty() && output.empty());
    }
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */
