Q-Link : https://leetcode.com/problems/maximum-product-of-two-elements-in-an-array/description/?envType=daily-question&envId=2023-12-12


Approach 1 : using sorting

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n=nums.size();
        return (nums[n-1]-1)*(nums[n-2]-1);
    }
};



------------------------------------------------------------------------------------------------------------------------------------------


Approach 2 : using max Heap

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        
        int n=nums.size();

        priority_queue<int>pq;

        for(auto &x:nums)pq.push(x);

        int first=pq.top()-1;
        pq.pop();
        int second=pq.top()-1;

        return first*second;
    }
};



------------------------------------------------------------------------------------------------------------------------------------------


Approach 3 : using Min Heap

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        
        int n=nums.size();

        priority_queue<int,vector<int>,greater<int>>pq;

        for(auto &x:nums){
            pq.push(x);
            if(pq.size()>2)pq.pop();
        
        
        }

        int first=pq.top()-1;
        pq.pop();
        int second=pq.top()-1;

        return first*second;
    }
};



------------------------------------------------------------------------------------------------------------------------------------------


Approach 4 : using two variables


class Solution {
public:
    int maxProduct(vector<int>& nums) {
        
        int n=nums.size();

        int first_max=INT_MIN;
        int second_max=INT_MIN;

        for(int i=0;i<n;i++){
            if(nums[i]>=first_max){
                second_max=first_max;
                first_max=nums[i];
            }
            else if(nums[i]>second_max && nums[i]<first_max){
                second_max=nums[i];
            }
        }

        return (first_max-1)*(second_max-1);
    }
};










