Q-Link : https://leetcode.com/problems/group-anagrams/description/?envType=daily-question&envId=2024-02-06

Approach 1 : Sorting + Map

class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& s) {
        vector<vector<string>>ans;
        if(s.size()==0)return {{""}};
        unordered_map<string,vector<string>>mp;

        for(auto& x:s){
            string strs= x;
            sort(strs.begin(),strs.end());
            if(mp.find(strs)!=mp.end()){
                mp[strs].push_back(x);
            }
            else mp[strs].push_back(x);
        }

        for(auto & x :mp){
            vector<string>temp;
            temp=x.second;
            ans.push_back(temp);
        }

        return ans;
    }
};

Approach 2 : Without Sorting 

class Solution {
public:

    string generate(string& a){
        vector<int>arr(26,0);
        string val="";

        for(int i=0;i<a.length();i++){
            arr[a[i]-'a']++;
        }

        for(int i=0;i<arr.size();i++){
            if(arr[i]!=0){
                for(int j=1;j<=arr[i];j++)val+=(i+'a');
            }
        }
        return val;
    }

    vector<vector<string>> groupAnagrams(vector<string>& s) {
        vector<vector<string>>ans;
        if(s.size()==0)return {{""}};
        unordered_map<string,vector<string>>mp;

        for(auto& x:s){
            string strs=generate(x);
            
            if(mp.find(strs)!=mp.end()){
                mp[strs].push_back(x);
            }
            else mp[strs].push_back(x);
        }

        for(auto & x :mp){
            vector<string>temp;
            temp=x.second;
            ans.push_back(temp);
        }

        return ans;
    }
};
